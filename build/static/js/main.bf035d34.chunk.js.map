{"version":3,"sources":["components/Header/index.js","utils/API.js","components/TableData/index.js","components/SearchBox/index.js","components/Container/index.js","App.js","serviceWorker.js","index.js"],"names":["Header","axios","get","TableData","props","className","onClick","sortByName","results","map","result","key","login","uuid","src","picture","thumbnail","alt","name","first","last","phone","href","emil","email","format","dob","date","SearchBox","htmlFor","onChange","handleInputChange","value","type","placeholder","id","Container","state","search","employees","filteredEmployees","order","filtered","sorted","sort","a","b","setState","event","userInput","target","filter","employee","toLowerCase","indexOf","employeeSearch","API","then","res","data","catch","err","console","log","handleSearch","preventDefault","alert","includes","this","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.bf035d34.chunk.js","sourcesContent":["import React from \"react\"\nimport \"./style.css\"\n\n\nfunction Header() {\n    return (\n        <div>\n            <h1>Employee Directory</h1>\n            <p>Click on carrots to filter by heading or use the search to narrow your results.</p>\n        </div>\n\n    )\n}\n\nexport default Header","import axios from \"axios\";\nexport default {\n    getUsers: function () {\n        return axios.get(\"https://randomuser.me/api/?results=300&nat=us\");\n    }\n};","import React from \"react\";\nimport Moment from \"react-moment\";\nimport \"./style.css\"\n\nfunction TableData(props) {\n    return (\n        <table className=\"employeeTable\">\n            <thead>\n                <tr>\n                    <th>Image</th>\n                    <th onClick={props.sortByName}>Name</th>\n                    <th>Phone</th>\n                    <th>E-mail</th>\n                    <th>DOB</th>\n                </tr>\n            </thead>\n\n            <tbody className=\"\">\n                {props.results.map(result =>\n                    <tr className=\"table\" key={result.login.uuid}>\n                        <td><img src={result.picture.thumbnail} alt={\"profile image for \" + result.name.first + \" \" + result.name.last} className=\"\" /></td>\n                        <td>{result.name.first + \" \" + result.name.last}</td>\n                        <td>{result.phone}</td>\n                        <td className=\"employeeEmail\"><a href={result.emil}>{result.email}</a></td>\n                        <td><Moment format=\"MM/DD/YYYY\">{result.dob.date}</Moment></td>\n\n                    </tr>\n                )}\n            </tbody>\n        </table>\n\n    )\n}\n\nexport default TableData","import React from \"react\"\nimport \"./style.css\"\n\nfunction SearchBox(props) {\n    return (\n        <form>\n            <div className=\"form-group\">\n                <label htmlFor=\"search\"></label>\n                <input\n                    onChange={props.handleInputChange}\n                    value={props.value}\n                    name=\"search\"\n                    type=\"text\"\n                    className=\"form-control\"\n                    placeholder=\"Search\"\n                    id=\"search\"\n                />\n            </div>\n        </form>\n\n    )\n}\n\nexport default SearchBox","import React, { Component } from \"react\"\nimport API from \"../../utils/API\"\nimport TableData from \"../TableData\"\nimport SearchBox from \"../SearchBox\";\nimport \"./style.css\"\n\n\nclass Container extends Component {\n    state = {\n        search: \"\",\n        employees: [],\n        filteredEmployees: [],\n        order: \"\"\n    };\n\n    componentDidMount() {\n        API.getUsers().then(res => this.setState({\n            employees: res.data.results,\n            filteredEmployees: res.data.results\n        })).catch(err => console.log(err))\n    }\n\n    sortByName = () => {\n        const filtered = this.state.filteredEmployees;\n        if (this.state.order === \"asc\") {\n            const sorted = filtered.sort((a, b) => (a.name.first > b.name.first) ? 1 : -1)\n\n            this.setState({\n                filteredEmployees: sorted,\n                order: \"desc\"\n            })\n        } else {\n            const sorted = filtered.sort((a, b) => (a.name.first > b.name.first) ? 1 : -1)\n            this.setState({\n                filteredEmployees: sorted,\n                order: \"asc\"\n            })\n        }\n    }\n\n    handleInputChange = event => {\n        const employees = this.state.employees;\n        const userInput = event.target.value;\n        const filteredEmployees = employees.filter(employee => employee.name.first.toLowerCase().indexOf(userInput.toLowerCase()) > -1)\n        this.setState({\n            filteredEmployees,\n        });\n    };\n\n    employeeSearch = () => {\n        API.getUsers()\n            .then(res => this.setState({\n                filteredEmployees: res.data.results,\n                employees: res.data.results\n            }))\n            .catch(err => console.log(err))\n\n    }\n\n    handleSearch = event => {\n        event.preventDefault();\n        if (!this.state.search) {\n            alert(\"Enter a name\")\n        }\n        const { employees, search } = this.state;\n        const filteredEmployees = employees.filter(employee => employee.name.first.toLowerCase().includes(search.toLowerCase()));\n\n        this.setState({\n            filteredEmployees\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <SearchBox\n                    employee={this.state.employees}\n                    handleSearch={this.handleSearch}\n                    handleInputChange={this.handleInputChange} />\n\n                <TableData\n                    results={this.state.filteredEmployees}\n                    sortByName={this.sortByName} />\n\n\n            </div>\n        )\n\n    }\n\n}\n\nexport default Container\n","import React from 'react';\nimport Header from \"./components/Header\"\nimport Container from \"./components/Container\"\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Container />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}